import express, { Request, Response } from 'express';
import cors from 'cors';
import { ICreatePayment, YooCheckout } from '@a2seven/yoo-checkout';
import dotenv from 'dotenv';
import { db } from './firebase'; // –≤–∞—à –∏–º–ø–æ—Ä—Ç Firestore
import crypto from 'crypto';

dotenv.config();

const app = express();
const PORT = process.env.PORT || 4001;

app.use(cors());
app.use(express.json());

/**
 * 1) –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç YooKassa (/api/payment/notification)
 */
app.post('/api/payment/notification', async (req: Request, res: Response) => {
  try {
    const { event, object } = req.body;

    if (!object || !object.id) {
      console.warn('‚ùå notification: missing object or object.id');
      return res.status(400).json({ error: 'Invalid notification payload' });
    }

    const paymentId = object.id;
    const status = object.status;
    const paid = object.paid || false;
    const capturedAt = object.captured_at ? new Date(object.captured_at) : null;

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    const metadata = object.metadata || {};
    const userUID = metadata.userUID as string | undefined;
    const orderID = metadata.orderID as string | undefined;
    const tariffId = metadata.tariffId as string | undefined;

    console.log(`üîî Notification received (paymentId=${paymentId}): status="${status}", paid=${paid}, userUID=${userUID}, tariffId=${tariffId}`);

    // 1. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ (—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞)
    try {
      await db.collection('payments').doc(paymentId).update({
        status,
        paid,
        captured_at: capturedAt,
        updatedAt: new Date()
      });
      console.log(`   ‚Üí Payment ${paymentId} updated in Firestore`);
    } catch (e) {
      console.error(`   ‚ùå Failed to update payment ${paymentId}:`, e);
    }

    // 2. –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω –∏ –µ—Å—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ - —Å–æ–∑–¥–∞–µ–º –∞–±–æ–Ω–µ–º–µ–Ω—Ç
    if (paid && userUID && tariffId) {
      try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–∞—Ä–∏—Ñ–∞
        const tariffSnap = await db.collection('tariffs').doc(tariffId).get();
        const tariffData = tariffSnap.data();

        if (!tariffData) {
          console.warn(`‚ùå Tariff not found: ${tariffId}`);
          return res.status(200).json({ status: 'ok' }); // –í—Å–µ —Ä–∞–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 200 –¥–ª—è –ÆKassa
        }

        const now = new Date();
        const duration = tariffData.duration || '1 –º–µ—Å—è—Ü';
        const sessionCount = tariffData.sessionCount || 0;

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
        let endDate = new Date(now);
        if (duration.includes('–º–µ—Å—è—Ü')) {
          const months = parseInt(duration) || 1;
          endDate.setMonth(endDate.getMonth() + months);
        } else if (duration.includes('–¥–µ–Ω—å')) {
          const days = parseInt(duration) || 30;
          endDate.setDate(endDate.getDate() + days);
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç
        const subscriptionRef = await db.collection('subscriptions').add({
          userId: userUID,
          tariffId: tariffId,
          paymentId: paymentId,
          startDate: now,
          endDate: endDate,
          totalSessions: sessionCount,
          remainingSessions: sessionCount,
          isActive: true,
          createdAt: now,
          lastUsed: null
        });

        console.log(`   ‚Üí Created subscription ${subscriptionRef.id} for user ${userUID}`);

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞)
        await db.collection('users').doc(userUID).update({
          activeTariffId: tariffId,
          subscriptionStartDate: now,
          subscriptionEndDate: endDate,
          remainingSessions: sessionCount,
          activeSubscriptionId: subscriptionRef.id // –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç
        });

      } catch (e) {
        console.error(`‚ùå Failed to create subscription:`, e);
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
      }
    }

    // –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 200 –¥–ª—è –ÆKassa
    res.status(200).json({ status: 'ok' });

  } catch (error) {
    console.error('‚ùå Notification processing error:', error);
    res.status(500).json({ error: 'Failed to process notification' });
  }
});

/**
 * 2) –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ (/api/payment)
 */
app.post('/api/payment', async (req: Request, res: Response) => {
  const checkout = new YooCheckout({
    shopId:    process.env.YOO_SHOP_ID   || '1097556',
    secretKey: process.env.YOO_SECRET_KEY || 'test_6tcxjw66EmU5GqLrOQi77AlgKg4Tad64cVgn_cpPthI'
  });

  // –î–æ—Å—Ç–∞—ë–º –≤—Å—ë –∏–∑ —Ç–µ–ª–∞
  const { value, userUID, orderID, return_url, tariffId } = req.body;

  if (!value || !userUID || !orderID || !return_url || !tariffId) {
    console.warn('‚ùå createPayment: missing required field in body:', req.body);
    return res.status(400).json({ error: 'Missing one of required fields: value, userUID, orderID, return_url, tariffId' });
  }

  const createPayload: ICreatePayment = {
    amount: {
      value: value,
      currency: 'RUB'
    },
    payment_method_data: {
      type: 'bank_card'
    },
    capture: true,
    confirmation: {
      type: 'redirect',
      return_url: return_url
    },
    // –ö–ª–∞–¥—É –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ä–æ–≤–Ω–æ —Ç–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Ç–æ–º –±—É–¥—É —Ä–∞–∑–±–∏—Ä–∞—Ç—å –ø–æ –∫–ª—é—á–∞–º userUID, orderID, tariffId
    metadata: {
      userUID: userUID,
      orderID: orderID,
      tariffId: tariffId
    }
  };

  try {
    // –°–æ–∑–¥–∞—ë–º –ø–ª–∞—Ç–µ–∂
    const payment = await checkout.createPayment(createPayload, Date.now().toString());

    console.log(`üí≥ Payment created: id=${payment.id}, status="${payment.status}", confirmation_url=${payment.confirmation?.confirmation_url}`);

    // –û–±–Ω–æ–≤–ª—è–µ–º Firestore: —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç payments —Å ID = payment.id
    await db.collection('payments').doc(payment.id).set({
      userUID,
      orderID,
      tariffId,
      value,
      status: payment.status,
      createdAt: new Date(),
      paymentID: payment.id,
      confirmation_url: payment.confirmation?.confirmation_url || null
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É –≤–µ—Å—å –æ–±—ä–µ–∫—Ç payment (–∏–ª–∏ —Ç–∞–º —Ç–æ–ª—å–∫–æ confirmation_url, –∫–∞–∫ –≤–∞–º —É–¥–æ–±–Ω–æ)
    res.json({ payment });
  } catch (error) {
    console.error('Payment creation error:', error);
    res.status(400).json({ error: 'payment error', details: (error as Error).message });
  }
});

app.listen(PORT, () => {
  console.log(`Server running at http://localhost:${PORT}`);
});

// –î–æ–±–∞–≤–ª—è–µ–º –≤ server.ts

/**
 * 3) –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞ (/api/subscription/generate-qr)
 */
app.post('/api/subscription/generate-qr', async (req: Request, res: Response) => {
  const { userId } = req.body;
  
  if (!userId) {
    return res.status(400).json({ error: 'User ID is required' });
  }

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç
    const subscriptionSnap = await db.collection('subscriptions')
      .where('userId', '==', userId)
      .where('isActive', '==', true)
      .limit(1)
      .get();

    if (subscriptionSnap.empty) {
      return res.status(404).json({ error: 'No active subscription found' });
    }

    const subscription = subscriptionSnap.docs[0].data();
    if (subscription.remainingSessions <= 0) {
      return res.status(400).json({ error: 'No sessions left' });
    }

    // 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥
    const qrCode = crypto.randomBytes(16).toString('hex');
    const expiresAt = new Date(Date.now() + 30000); // 30 —Å–µ–∫—É–Ω–¥

    // 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firestore
    await db.collection('qr_codes').doc(qrCode).set({
      userId,
      subscriptionId: subscriptionSnap.docs[0].id,
      createdAt: new Date(),
      expiresAt,
      isUsed: false
    });

    res.json({ 
      qrCode,
      expiresAt,
      remainingSessions: subscription.remainingSessions
    });

  } catch (error) {
    console.error('QR generation error:', error);
    res.status(500).json({ error: 'Failed to generate QR code' });
  }
});

/**
 * 4) –í–∞–ª–∏–¥–∞—Ü–∏—è QR-–∫–æ–¥–∞ (/api/subscription/validate-qr)
 */
app.post('/api/subscription/validate-qr', async (req: Request, res: Response) => {
  const { qrCode, adminId } = req.body;

  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥
    const qrSnap = await db.collection('qr_codes').doc(qrCode).get();
    
    if (!qrSnap.exists) {
      return res.status(404).json({ error: 'Invalid QR code' });
    }

    const qrData = qrSnap.data()!;

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
    if (new Date(qrData.expiresAt) < new Date()) {
      return res.status(400).json({ error: 'QR code expired' });
    }

    if (qrData.isUsed) {
      return res.status(400).json({ error: 'QR code already used' });
    }

    // 3. –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
    await qrSnap.ref.update({ 
      isUsed: true,
      usedAt: new Date(),
      adminId 
    });

    // 4. –û–±–Ω–æ–≤–ª—è–µ–º –∞–±–æ–Ω–µ–º–µ–Ω—Ç
    const subRef = db.collection('subscriptions').doc(qrData.subscriptionId);
    await db.runTransaction(async (t) => {
      const subSnap = await t.get(subRef);
      const subData = subSnap.data()!;
      
      t.update(subRef, {
        remainingSessions: subData.remainingSessions - 1,
        lastUsed: new Date()
      });
    });

    // 5. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    await db.collection('subscription_usage').add({
      subscriptionId: qrData.subscriptionId,
      userId: qrData.userId,
      adminId,
      usedAt: new Date(),
      qrCode
    });

    res.json({ success: true });

  } catch (error) {
    console.error('QR validation error:', error);
    res.status(500).json({ error: 'Failed to validate QR code' });
  }
});
